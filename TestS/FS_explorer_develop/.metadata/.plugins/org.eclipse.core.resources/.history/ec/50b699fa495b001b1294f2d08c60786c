
/***************************************************************************/ /**
  @file     FileName.c
  @brief
  @author   Guido Lambertucci
 ******************************************************************************/

/*******************************************************************************
 * INCLUDE HEADER FILES
 ******************************************************************************/
#include "FS_explorer.h"
#include <stdio.h>
#include <string.h>
#include "ff.h"
/*******************************************************************************
 * CONSTANT AND MACRO DEFINITIONS USING #DEFINE
 ******************************************************************************/


/*******************************************************************************
 * ENUMERATIONS AND STRUCTURES AND TYPEDEFS
 ******************************************************************************/
typedef struct {
	char name[NAMES_BUFFER_SIZE];
	bool is_directory;
} directory_name_att;


typedef struct {
	//FAT things
	DIR directory; /* Directory object */
	FILINFO fileInformation;

	//indexes

	uint16_t path_index;
	uint8_t directory_index;

	//counters
	uint16_t page_counter;
	uint8_t directory_counter_finished;
	uint8_t directory_depht;

	//flags
	uint16_t page_finished;
	bool directory_opened;
	bool directory_finished;

	//data structures
	directory_name_att directoryNames[NAME_LIST_SIZE];
	char directory_path[1000];

	//callback
	cback mycb;

} explorer_data_t;


/*******************************************************************************
 * FUNCTION PROTOTYPES WITH FILE SCOPE
 ******************************************************************************/
void copyFname(char *destiny, char *source);
void addToPath(char *s);
void removeDirFromPath();


/*******************************************************************************
 * VARIABLE DECLARATION WITH FILE SCOPE
 ******************************************************************************/
static explorer_data_t data;

/*******************************************************************************
 * FUNCTION DEFINITIONS WITH GLOBAL SCOPE
 ******************************************************************************/
char * exploreFS(char * path){
	FRESULT error;
	if (data.directory_opened) {
		f_closedir(&data.directory);
		data.directory_opened = false;
	}
	if (f_opendir(&data.directory, path)) {
#ifdef DEBUG
		printf("Open directory failed.\r\n");
#endif
		return -1;

	}
	data.directory_opened = true;

	uint8_t i = 0;
	data.directory_index = 0;
	data.page_counter = 0;
	while (i < NAME_LIST_SIZE) {
		error = f_readdir(&data.directory, &data.fileInformation);

		/* To the end. */
		if ((error != FR_OK) || (data.fileInformation.fname[0U] == 0U)) {
			data.directory_finished = true;
			data.page_finished = data.page_counter;
			data.directory_counter_finished = i - 1;
			break;
		}
		if (data.fileInformation.fname[0] == '.') {
			continue;
		}
		if (data.fileInformation.fattrib & AM_DIR) {

			copyFname(data.directoryNames[i].name, data.fileInformation.fname);
			data.directoryNames[i].is_directory = true;
			i++;
		} else {

			copyFname(data.directoryNames[i].name, data.fileInformation.fname);
			data.directoryNames[i].is_directory = false;
			i++;
		}
	}

	return data.directoryNames[data.directory_index].name;


}
char* getNext(){
	FRESULT error;
	if (data.directory_index < NAME_LIST_SIZE - 1) {

		if (data.directory_finished && (data.page_finished == data.page_counter)
				&& (data.directory_counter_finished == data.directory_index)) {
			return NULL;
		}

		data.directory_index++;
		return data.directoryNames[data.directory_index].name;
	} else {
		data.page_counter++;
		uint8_t i = 0;
		while (i < NAME_LIST_SIZE) {
			error = f_readdir(&data.directory, &data.fileInformation);
			/* To the end. */
			if ((error != FR_OK) || (data.fileInformation.fname[0U] == 0U)) {
				data.directory_finished = true;
				data.page_finished = data.page_counter;
				data.directory_counter_finished = i - 1;
				break;
			}
			if (data.fileInformation.fname[0] == '.') {
				continue;
			}
			if (data.fileInformation.fattrib & AM_DIR) {
#ifdef DEBUG
				printf("Directory file : %s.\r\n", data.fileInformation.fname);
#endif
					data.directoryNames[i].is_directory = true;
				copyFname(data.directoryNames[i].name,
						data.fileInformation.fname);
				i++;
			} else {
#ifdef DEBUG
				PRINTF("General file : %s.\r\n", data.fileInformation.fname);
#endif
				data.directoryNames[i].is_directory = false;
				copyFname(data.directoryNames[i].name,
						data.fileInformation.fname);
				i++;
			}
		}

		data.directory_index = 0;

		return data.directoryNames[data.directory_index].name;
	}
}
char* getPrev(){
	FRESULT error;
	if (data.directory_index > 0) {

		data.directory_index--;
		return data.directoryNames[data.directory_index].name;
	} else {
		if ((data.page_counter == 0) && (data.directory_index == 0)) {
			return NULL;
		}

		data.page_counter--;
		f_rewinddir(&data.directory);
		uint16_t i = 0, j = 0;
		for (i = 0; i < data.page_counter * NAME_LIST_SIZE + NAME_LIST_SIZE;) {
			f_readdir(&data.directory, &data.fileInformation);
			if (data.fileInformation.fname[0] == '.') {
				continue;
			}
			i++;
			if (i > data.page_counter * NAME_LIST_SIZE) { //si estoy en la ultima pagina
				copyFname(data.directoryNames[j].name,
						data.fileInformation.fname);
				if (data.fileInformation.fattrib & AM_DIR) {
					data.directoryNames[j].is_directory = true;
				} else {
					data.directoryNames[j].is_directory = false;
				}
				j++;
			}
		}
		data.directory_index = NAME_LIST_SIZE - 1;
		return data.directoryNames[data.directory_index].name;
	}
}
char *  openSelected(){
	if (data.directoryNames[data.directory_index].is_directory) {
		data.directory_depht++;
		char *ret = NULL;
		printf("Trying to open Directory: %s\r\n",
				data.directoryNames[data.directory_index].name);
		addToPath(data.directoryNames[data.directory_index].name);
		ret = exploreFS(data.directory_path);
		return ret;
	} else {
		printf("File selected: %s\r\n",
				data.directoryNames[data.directory_index].name);
		addToPath(data.directoryNames[data.directory_index].name);

		/*
		 * aca iria codigo para hacer algo cuando me eligen el archivo mp3 para ponerle play
		 *
		 */
		if (!data.mycb) {
			data.mycb(); //calls the callback
		}
		return NULL;
	}
}
char *  goBackDir(){
	if (data.directory_depht > 0) {
		data.directory_depht--;
		char *ret = NULL;
		removeDirFromPath();
		ret = exploreFS(data.directory_path);
		return ret;
	} else {
		return NULL;
	}
}
char * getPath(void){
	return data.directory_path;
}
void addCallbackForFile(cback cb){
	if (!cb) {
		data.mycb = cb;
	}
}
/*******************************************************************************
 * FUNCTION DEFINITIONS WITH FILE SCOPE
 ******************************************************************************/

void addToPath(char *s) {

	data.directory_path[data.path_index] = '/'; //add the / simbol for the new directory/file
	data.path_index++;
	uint16_t i = 0;
	while (s[i] != NULL) {
		data.directory_path[data.path_index] = s[i];
		i++;
		data.path_index++;
	}

	data.directory_path[data.path_index] = '\0'; //add EOS in case its a file
}
void removeDirFromPath() {
	while (data.directory_path[data.path_index] != '/') {
		data.directory_path[data.path_index] = '\0';
		data.path_index--;
	}
	data.directory_path[data.path_index] = '\0'; //add EOS in case its a file
}


void copyFname(char *destiny, char *source) {
	uint8_t i = 0;
	while ((*source != '\0') && (i < NAMES_BUFFER_SIZE)) {
		destiny[i] = source[i];
		i++;
	}

}
/*******************************************************************************
 *						 INTERRUPTION ROUTINES
 ******************************************************************************/


